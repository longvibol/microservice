** Resiliency

1. Setup failback : 

- Add fial back anotation : fallbackMethod = "getCustomerDetailDefault" on the main controller :

@CircuitBreaker(name = "customerDetailSuport", fallbackMethod = "getCustomerDetailDefault")
	@GetMapping("customerdetail/{myCustomerId}")
	public ResponseEntity<CustomerDetailDTO> getCustomerDetail(@PathVariable("myCustomerId") Long customerId) {

		CustomerDetailDTO dto = new CustomerDetailDTO();
		Customer customer = customerService.getById(customerId);

		if (customer == null) {
			throw new RuntimeException("No customer found with this id");
		}

//		we want to convert from customer to customerDTO 	

		CustomerDTO customerDTO = customerMapper.toCustomerDTO(customer);
		List<LoanResponseDTO> loanInfo = loanFeignClient.getLoanInfo(customerId);
		List<CardResponseDTO> cardInfo = cardFeignClient.getCardInfo(customerId);

		/*
		 * Below where we want to show : private CustomerDTO customer; private
		 * List<CardResponseDTO> cards; private List<LoanResponseDTO> loans;
		 * 
		 */

		dto.setCustomer(customerDTO);
		dto.setLoans(loanInfo);
		dto.setCards(cardInfo);

//		dto : is the CustomerDetail we want to set of output

		return ResponseEntity.ok(dto);

	}


--------------- add new when main controller fail 


public ResponseEntity<CustomerDetailDTO> getCustomerDetailDefault(@PathVariable("myCustomerId") Long customerId,
			Throwable e) {

		CustomerDetailDTO dto = new CustomerDetailDTO();
		Customer customer = customerService.getById(customerId);

		if (customer == null) {
			throw new RuntimeException("No customer found with this id");
		}

		CustomerDTO customerDTO = customerMapper.toCustomerDTO(customer);
		dto.setCustomer(customerDTO);
		
		System.out.println("Expection show = " +e);
		return ResponseEntity.ok(dto);

	}

=========================== End 























