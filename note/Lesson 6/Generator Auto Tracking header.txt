======================= Generatate Auto Tracking Number

- We need to add the auto Tracking Number in each service to track which point it error: 
- We start from Gate Way server

1. gatewayserver: 

- Greate Class: gatewayserver.filter (Request, Resaponse and Filter) 

-------------- Filter : direct on way throw gateway filter
កំណត់រាល់ការ Request មកកាន់ Eage Server 

@Component
public class FilterUtility {
public static final String CORRELATION_ID = "pisethbank-correlation-id"; 
	
	public String getCorrelationId(HttpHeaders requestHeader) {
		if(requestHeader.get(CORRELATION_ID) != null) {
			List<String> requestHeaderList = requestHeader.get(CORRELATION_ID);
			return requestHeaderList.stream().findFirst().get();
		}
		return null;
	}
	
	public ServerWebExchange setRequestHeader(ServerWebExchange exchange, String name, String value) {
		return exchange.mutate()
				.request(exchange.getRequest().mutate().header(name, value).build()).build();
	}
	
	public ServerWebExchange setCorrelationId(ServerWebExchange exchange, String correlationId) {
		return this.setRequestHeader(exchange, CORRELATION_ID, correlationId);
	}
}


------------------------ RequestTracingFilter (classs) 
- អោយវាបង្កើត Autoring Number to tracking UUID 
- កំណត់លេខរៀងវាអោយធ្វើមុនគេ ហើយបញ្ចូនទៅកាន់ Service ដែលពាក់ពាន់
- 


@Order(1)
@Slf4j
@RequiredArgsConstructor
@Component
public class RequestTracingFilter implements GlobalFilter{
	
	private final FilterUtility filterUtility;

	@Override
	public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
		HttpHeaders requestHeader = exchange.getRequest().getHeaders();
		if(isCorrelationIdPresent(requestHeader)) {
			log.debug("pisethbank-corelation-id found in RequestTracingFilter {}", 
					filterUtility.getCorrelationId(requestHeader));
		}else {
			String correlationId = generateCorrelationId();
			exchange = filterUtility.setCorrelationId(exchange, correlationId);
			log.debug("pisethbank-corelation-id generated in RequestTracingFilter {}", 
					correlationId);
		}
		
		return chain.filter(exchange);
	}
	
	private String generateCorrelationId() {
		return UUID.randomUUID().toString();
	}
	
	private boolean isCorrelationIdPresent(HttpHeaders requestHeader) {
		if(filterUtility.getCorrelationId(requestHeader) != null) {
			return true;
		}
		return false;
	}

}


-------------------------  ResponseTracingFilter (Class)
ពេលវាបញ្ចប់អោយវាបង្ហាញ Number ដែលយើង tracking នឹងបានបញ្ចាប់ 

@Slf4j
@RequiredArgsConstructor
@Configuration
public class ResponseTracingFilter {
	private final FilterUtility filterUtility;
	
	@Bean
	public GlobalFilter postFilter() {
		
		return ( exchange,  chain) ->{
			
			return chain.filter(exchange).then(Mono.fromRunnable(()->{
				HttpHeaders headers = exchange.getRequest().getHeaders();
				String correlationId = filterUtility.getCorrelationId(headers);
				log.debug("Updated the corelation id to the outbound header: {}", 
						correlationId);
				exchange.getResponse().getHeaders().add(FilterUtility.CORRELATION_ID, correlationId);
			}));
		};
		
		
	}

}

------------------------ 

2. Main Account service in microservice ដែលវាត្រូវការ call to other service by "FeignClient"
- Controller 
- FeignClient (loan and card) need to update 

------------------------- Controler detail 

@Slf4j
@RestController
@RequestMapping("api/customers")
public class CustomerController {
	@Autowired
	private CustomerService customerService;
	@Autowired
	private CustomerMapper customerMapper;
	
	@Autowired
	private CardFeignClient cardFeignClient;
	
	@Autowired
	private LoanFeignClient loanFeignClient;
	
	@PostMapping
	public ResponseEntity<?> saveCustomer(@RequestBody CustomerDTO dto){
		Customer customer = customerMapper.toCustomer(dto);
		customer = customerService.save(customer);
		return ResponseEntity.ok(customer);
	}
	
	@GetMapping
	public ResponseEntity<?> getCustomers(){
		return ResponseEntity.ok(customerService.getCustomers());
	}
	
	@GetMapping("{customerId}")
	public ResponseEntity<?> getCustomers(@PathVariable Long customerId){
		return ResponseEntity.ok(customerService.getById(customerId));
	}
	
	//@CircuitBreaker(name = "customerDetailSupport", fallbackMethod = "getCustomerDetailDefault")
	@Retry(name = "retryCustomerDetail", fallbackMethod = "getCustomerDetailDefault")	
	@GetMapping("customerDetail/{myCustomerId}")
	public ResponseEntity<CustomerDetailDTO> getCustomerDetail(
			@RequestHeader("pisethbank-correlation-id") String correlationId,
			@PathVariable("myCustomerId") Long customerId){
		
		log.debug("fetchCustomerDetail method start {} ", correlationId);
		
		CustomerDetailDTO dto = new CustomerDetailDTO();
		Customer customer = customerService.getById(customerId);
		if(customer == null) {
			throw new RuntimeException("No customer found with this id");
		}
		CustomerDTO customerDTO = customerMapper.toCustomerDTO(customer);
		
		List<LoanResponseDTO> loanInfo = loanFeignClient.getLoanInfo(correlationId, customerId);
		List<CardResponseDTO> cardInfo = cardFeignClient.getCardInfo(correlationId, customerId);
		
		dto.setCustomer(customerDTO);
		dto.setLoans(loanInfo);
		dto.setCards(cardInfo);
		
		log.debug("fetchCustomerDetail method end {}", correlationId);
		return ResponseEntity.ok(dto);
	}
	

Note:
@RequestHeader("pisethbank-correlation-id") String correlationId (Header Key and Value) 


-------------------------- Feign Client Loan

@FeignClient(name = "loan")
public interface LoanFeignClient {

	@GetMapping("/api/loans/{customerId}")	
	List<LoanResponseDTO> getLoanInfo(
			@RequestHeader("pisethbank-correlation-id") String correlationId,
			@PathVariable Long customerId);
	
}

-------------------------- Feign Client Card

@FeignClient(name="card")
public interface CardFeignClient {
	
	@GetMapping("/api/cards/{customerId}")	
	List<CardResponseDTO> getCardInfo(			
	@RequestHeader("pisethbank-correlation-id") String correlationId,
	@PathVariable Long customerId);
		
}

---------------------

3. Testing : Put the in the applicataion.property 

logging.level.com.piseth.school.account=DEBUG

- Check at the Gateway first :
in the response header 

pisethbank-correlation-id  : 3674b7ac-c184-4548-a3c0-08c683c1c782

- Request API: localhost:8072/vibolbank/account/api/customers/customerDetail/1

+ localhost:8072/vibolbank/account : gateway server 
+ api/customers/customerDetail/1 : Account Controller detail request 

Resutl it need to have all the number tracking from the Gateway server in each service call from Gateway:

3674b7ac-c184-4548-a3c0-08c683c1c782

--------------- 


 


















































