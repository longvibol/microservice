version: "3.8"
services:

  read:
    image: grafana/loki:2.9.2
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10
    networks: &loki-dns
      vibolnetwork:
        aliases:
          - loki

  write:
    image: grafana/loki:2.9.2
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  promtail:
    image: grafana/promtail:2.9.2
    volumes:
      - ../observability/promtail/promtail-local-config.yaml:/etc/promtail/config.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - gateway
    networks:
      - vibolnetwork

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    networks:
      - vibolnetwork

  loki:
    image: grafana/loki:2.9.2
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - vibolnetwork

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy 
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
        EOF
        /run.sh
    ports:
      - "3000:3000"
    healthcheck:
      test: "curl --fail --silent localhost:9001/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    networks:
      - vibolnetwork

  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    ports:
      - "9090:9090"
    networks:
      - vibolnetwork

  gateway:
    image: nginx:latest
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "5000:3100"
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbit:
    image: vibollong/rabbitmq:v2
    hostname: rabbitmq
    container_name: rabbit
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    networks:
      - vibolnetwork
      
  eurekaserver:
    image: vibollong/eurekaserver:v2
    container_name: eurekaserver
    mem_limit: 700m
    ports:
      - "9001:9001"
    networks:
      vibolnetwork:
       aliases:
          - eurekaserver       
    depends_on: 
      - configserver
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    environment: 
      SPRING_PROFILES_ACTIVE: default
      SPRING_CONFIG_IMPORT: optional:configserver:http://localhost:8071/

  configserver:
    image: vibollong/configserver:v2
    mem_limit: 700m
    container_name: configserver-ms
    healthcheck:
      test: "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    ports:
      - "8071:8071"
    depends_on:
      rabbit:
        condition: service_healthy
    environment:
      SPRING_RABBITMQ_HOST: rabbit
    networks:
      - vibolnetwork

  mongodb:
    image: mvertes/alpine-mongo:latest
    container_name: mongo
    ports:
      - "7777:27017"
    healthcheck:
      test: echo 'db.stats().ok' | mongo localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    volumes:
      - './data:/data/db'
    networks:
      vibolnetwork:
        aliases: 
          - mongodb  
          
  gatewayserver:
    image: vibollong/gatewayserver:v2
    container_name: gatewayserver-ms
    mem_limit: 700m
    ports:
      - "8072:8072"
    networks:
      vibolnetwork:
        aliases:
          - gatewayserver 
    depends_on: 
      - configserver
      - eurekaserver
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    environment: 
      SPRING_PROFILES_ACTIVE: default
      SPRING_CONFIG_IMPORT: optional:configserver:http://localhost:8071/
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eurekaserver:9001/eureka/

  loan:
    image: vibollong/loan:v2
    container_name: loan-ms
    mem_limit: 700m
    ports:
      - "8090:8090"
    networks:
      - vibolnetwork
    depends_on: 
      - configserver
      - mongodb
      - eurekaserver
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s
    environment: 
      SPRING_PROFILES_ACTIVE: default
      SPRING_CONFIG_IMPORT: optional:configserver:http://localhost:8071/
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eurekaserver:9001/eureka/
      SPRING_RABBITMQ_HOST: rabbit
      MONGODB_HOST_NAME: mongodb  

  card:
    image: vibollong/card:v2
    container_name: card-ms
    mem_limit: 700m
    ports:
      - "8070:8070"
    networks:
      - vibolnetwork
    depends_on: 
      - configserver
      - eurekaserver
      - mongodb
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    environment: 
      SPRING_PROFILES_ACTIVE: default
      SPRING_CONFIG_IMPORT: optional:configserver:http://localhost:8071/
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eurekaserver:9001/eureka/
      SPRING_RABBITMQ_HOST: rabbit
      MONGODB_HOST_NAME: mongodb

  postgres:
    image: postgres:latest
    environment:
      - POSTGRES_USER=account
      - POSTGRES_PASSWORD=account123
      - POSTGRES_DB=account_service
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s  
    ports:
      - "5432:5432"
    networks:
      vibolnetwork:
        aliases:
          - postgres
    depends_on: 
      - configserver
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s  

  pg-admin:
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@email.com
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_LISTEN_PORT=5151
    ports:
      - "5151:5151"
    networks:
      vibolnetwork:   
         aliases:
          - pgadmin      

  account:
    image: vibollong/account:v2
    container_name: account-ms
    healthcheck:
      test: "curl --fail --silent localhost:8081/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    ports:
      - "8081:8081"
    networks:
      - vibolnetwork
    depends_on: 
      configserver:
        condition: service_healthy
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 10
        window: 120s
    environment:
      SPRING_PROFILES_ACTIVE: default
      SPRING_CONFIG_IMPORT: configserver:http://configserver:8071/
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eurekaserver:9001/eureka/
      SPRING_RABBITMQ_HOST: rabbit
      POSTGRES_HOST_NAME: postgres
networks:
  vibolnetwork: